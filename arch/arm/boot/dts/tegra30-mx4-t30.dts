/dts-v1/;

#include "tegra30-colibri.dtsi"

/ {
	model = "Toradex Colibri T30 on MX-4 T20/T30 board";
	compatible = "toradex,colibri_t30-eval-v3", "toradex,colibri_t30", "nvidia,tegra30";

	aliases {
		rtc0 = "/i2c@7000d000/tps65911@2d";
		serial0 = &uarta;
		serial1 = &uartb;
		serial2 = &uartd;
		mmc0 = "/sdhci@78000600"; /* eMMC */
	};

	pinmux@70000868 {
		pinctrl-names = "default";
		pinctrl-0 = <&state_default>;

		state_default: pinmux {
			/* DATA-READY-PIC */
			ulpi_data4_po5 {
				nvidia,pins = "ulpi_data4_po5";
				nvidia,function = "uarta";
				nvidia,pull = <TEGRA_PIN_PULL_DOWN>;
				nvidia,tristate = <TEGRA_PIN_DISABLE>;
				nvidia,enable-input = <TEGRA_PIN_ENABLE>;
			};

			/* ACC-INT1 */
			gmi_cs3_n_pk4 {
				nvidia,pins = "gmi_cs3_n_pk4";
				nvidia,function = "nand";
				nvidia,pull = <TEGRA_PIN_PULL_NONE>;
				nvidia,tristate = <TEGRA_PIN_DISABLE>;
				nvidia,enable-input = <TEGRA_PIN_ENABLE>;
			};

			/* not tri-stating GMI_WR_N on nPWE SODIMM pin 99 */
			sdmmc3_dat4_pd1 {
				nvidia,pins = "sdmmc3_dat4_pd1";
				nvidia,function = "sdmmc3";
				nvidia,pull = <TEGRA_PIN_PULL_DOWN>;
				nvidia,tristate = <TEGRA_PIN_ENABLE>;
				nvidia,enable-input = <TEGRA_PIN_DISABLE>;
			};

			/* not tri-stating GMI_WR_N on RDnWR SODIMM pin 93 */
			sdmmc3_dat5_pd0 {
				nvidia,pins = "sdmmc3_dat5_pd0";
				nvidia,function = "sdmmc3";
				nvidia,pull = <TEGRA_PIN_PULL_DOWN>;
				nvidia,tristate = <TEGRA_PIN_ENABLE>;
				nvidia,enable-input = <TEGRA_PIN_DISABLE>;
			};

			/* CAN-1-INT */
			sdmmc3_dat2_pb5 {
				nvidia,pins = "sdmmc3_dat2_pb5";
				nvidia,function = "sdmmc3";
				nvidia,pull = <TEGRA_PIN_PULL_NONE>;
				nvidia,tristate = <TEGRA_PIN_DISABLE>;
				nvidia,enable-input = <TEGRA_PIN_ENABLE>;
			};

			/* CAN-2-INT */
			sdmmc3_clk_pa6 {
				nvidia,pins = "sdmmc3_clk_pa6";
				nvidia,function = "sdmmc3";
				nvidia,pull = <TEGRA_PIN_PULL_NONE>;
				nvidia,tristate = <TEGRA_PIN_DISABLE>;
				nvidia,enable-input = <TEGRA_PIN_ENABLE>;
			};

			/* CAN-2-INT, CAN-3-INT, CAN-4-INT, CAN-5-INT */
			dap1_fs_pn0 {
				nvidia,pins = "dap1_fs_pn0",
						"dap1_din_pn1",
						"dap1_dout_pn2",
						"dap1_sclk_pn3";
				nvidia,function = "i2s0";
				nvidia,pull = <TEGRA_PIN_PULL_NONE>;
				nvidia,tristate = <TEGRA_PIN_DISABLE>;
				nvidia,enable-input = <TEGRA_PIN_ENABLE>;
			};

			gmi_ad0_pg0 {
				nvidia,pins = "gmi_ad0_pg0",
				    	"gmi_ad1_pg1",
				    	"gmi_ad2_pg2",
				    	"gmi_ad3_pg3",
				    	"gmi_ad4_pg4",
				    	"gmi_ad5_pg5",
				    	"gmi_ad6_pg6",
				    	"gmi_ad7_pg7",
				    	"dap2_fs_pa2",
				    	"dap2_sclk_pa3",
				    	"dap4_sclk_pp7",
				    	"gmi_wr_n_pi0",
				    	"gmi_oe_n_pi1",
				    	"gmi_cs4_n_pk2",
				    	"gmi_adv_n_pk0";
				nvidia,function = "gmi";
				nvidia,pull = <TEGRA_PIN_PULL_NONE>;
				nvidia,tristate = <TEGRA_PIN_DISABLE>;
				nvidia,enable-input = <TEGRA_PIN_ENABLE>;
			};

			/*
			 * THERMD_ALERT#, unlatched I2C address pin of LM95245
			 * temperature sensor therefore requires disabling for
			 * now
			 */
			lcd_dc1_pd2 {
				nvidia,pins = "lcd_dc1_pd2";
				nvidia,function = "rsvd3";
				nvidia,pull = <TEGRA_PIN_PULL_NONE>;
				nvidia,tristate = <TEGRA_PIN_DISABLE>;
				nvidia,enable-input = <TEGRA_PIN_ENABLE>;
			};

			/* Colibri MMC */
			kb_row10_ps2 {
				nvidia,pins = "kb_row10_ps2";
				nvidia,function = "sdmmc2";
				nvidia,pull = <TEGRA_PIN_PULL_NONE>;
				nvidia,tristate = <TEGRA_PIN_DISABLE>;
			};

			kb_row11_ps3 {
				nvidia,pins =	"kb_row11_ps3",
						"kb_row12_ps4",
						"kb_row13_ps5",
						"kb_row14_ps6",
						"kb_row15_ps7";
				nvidia,function = "sdmmc2";
				nvidia,pull = <TEGRA_PIN_PULL_UP>;
				nvidia,tristate = <TEGRA_PIN_DISABLE>;
			};

			/* Colibri SSP */
			ulpi_clk_py0 {
				nvidia,pins =   "ulpi_clk_py0",
						"ulpi_dir_py1",
						"ulpi_nxt_py2",
						"ulpi_stp_py3";
				nvidia,function = "spi1";
				nvidia,pull = <TEGRA_PIN_PULL_NONE>;
				nvidia,tristate = <TEGRA_PIN_DISABLE>;
			};
			sdmmc3_dat6_pd3 {
				nvidia,pins =	"sdmmc3_dat6_pd3",
						"sdmmc3_dat7_pd4";
				nvidia,function = "spdif";
				nvidia,pull = <TEGRA_PIN_PULL_NONE>;
				nvidia,tristate = <TEGRA_PIN_ENABLE>;
			};

			/* Colibri UART_A */
			ulpi_data0 {
				nvidia,pins =   "ulpi_data0_po1",
						"ulpi_data1_po2",
						"ulpi_data2_po3",
						"ulpi_data3_po4",
						"ulpi_data4_po5",
						"ulpi_data5_po6",
						"ulpi_data6_po7";
				nvidia,function = "uarta";
				nvidia,pull = <TEGRA_PIN_PULL_NONE>;
				nvidia,tristate = <TEGRA_PIN_DISABLE>;
			};

			/* Colibri UART_B */
			gmi_a16_pj7 {
				nvidia,pins =   "gmi_a16_pj7",
						"gmi_a17_pb0",
						"gmi_a18_pb1",
						"gmi_a19_pk7";
				nvidia,function = "uartd";
				nvidia,pull = <TEGRA_PIN_PULL_NONE>;
				nvidia,tristate = <TEGRA_PIN_DISABLE>;
			};

			/* Colibri UART_C */
			uart2_rxd {
				nvidia,pins =   "uart2_rxd_pc3",
						"uart2_txd_pc2";
				nvidia,function = "uartb";
				nvidia,pull = <TEGRA_PIN_PULL_NONE>;
				nvidia,tristate = <TEGRA_PIN_DISABLE>;
			};

			/* eMMC */
			sdmmc4_clk_pcc4 {
				nvidia,pins =	"sdmmc4_clk_pcc4",
						"sdmmc4_rst_n_pcc3";
				nvidia,function = "sdmmc4";
				nvidia,pull = <TEGRA_PIN_PULL_NONE>;
				nvidia,tristate = <TEGRA_PIN_DISABLE>;
			};
			sdmmc4_dat0_paa0 {
				nvidia,pins =	"sdmmc4_dat0_paa0",
						"sdmmc4_dat1_paa1",
						"sdmmc4_dat2_paa2",
						"sdmmc4_dat3_paa3",
						"sdmmc4_dat4_paa4",
						"sdmmc4_dat5_paa5",
						"sdmmc4_dat6_paa6",
						"sdmmc4_dat7_paa7";
				nvidia,function = "sdmmc4";
				nvidia,pull = <TEGRA_PIN_PULL_UP>;
				nvidia,tristate = <TEGRA_PIN_DISABLE>;
			};

			mmc1_pins_default: pinmux_mmc1_pins_default {
				sdmmc1_clk_pz0 {
					nvidia,pins = "sdmmc1_clk_pz0";
					nvidia,function = "sdmmc1";
					nvidia,pull = <TEGRA_PIN_PULL_UP>; /*0*/
					nvidia,tristate = <TEGRA_PIN_DISABLE>;
				};
				sdmmc1_cmd_pz1 {
					nvidia,pins = "sdmmc1_cmd_pz1",
							"sdmmc1_dat0_py7",
							"sdmmc1_dat1_py6",
							"sdmmc1_dat2_py5",
							"sdmmc1_dat3_py4";
					nvidia,function = "sdmmc1";
					nvidia,pull = <TEGRA_PIN_PULL_UP>;/*3*/
					nvidia,tristate = <TEGRA_PIN_DISABLE>;
				};
			};

			mmc1_pins_sleep: pinmux_mmc1_pins_sleep {
				sdmmc1_clk_pz0 {
					nvidia,pins = "sdmmc1_clk_pz0";
					nvidia,function = "sdmmc1";
					nvidia,pull = <TEGRA_PIN_PULL_UP>; /*7*/
					nvidia,tristate = <TEGRA_PIN_DISABLE>;
				};
				sdmmc1_cmd_pz1 {
					nvidia,pins = "sdmmc1_cmd_pz1",
							"sdmmc1_dat0_py7",
							"sdmmc1_dat1_py6",
							"sdmmc1_dat2_py5",
							"sdmmc1_dat3_py4";
					nvidia,function = "sdmmc1";
					nvidia,pull = <TEGRA_PIN_PULL_UP>;/*7*/
					nvidia,tristate = <TEGRA_PIN_DISABLE>;
				};
			};

			wlan_pins_default: pinmux_wlan_pins_default {
				/*WLAN EN*/
				ulpi_data7_po0 {
					nvidia,pins =	"ulpi_data7_po0";
					nvidia,function = "sdmmc1";
					nvidia,pull = <TEGRA_PIN_PULL_DOWN>;
					nvidia,tristate = <TEGRA_PIN_DISABLE>;
				};
				/*WLAN IRQ*/
				pex_l2_prsnt_n_pdd7 {
					nvidia,pins =	"pex_l2_prsnt_n_pdd7";
					nvidia,function = "sdmmc1";
					nvidia,pull = <TEGRA_PIN_PULL_NONE>;
					nvidia,tristate = <TEGRA_PIN_DISABLE>;
					nvidia,enable-input = <TEGRA_PIN_ENABLE>;
				};
				/* BT EN, not used */
				pex_l2_rst_n_pcc6 {
					nvidia,pins =	"pex_l2_rst_n_pcc6";
					nvidia,function = "sdmmc1";
					nvidia,pull = <TEGRA_PIN_PULL_UP>;
					nvidia,tristate = <TEGRA_PIN_DISABLE>;
					nvidia,enable-input = <TEGRA_PIN_DISABLE>;
				};
			};

		};
	};

	nor@70009000 {
		status = "okay";
		ranges = <
			0 0 0x48000000 0x00000100
			1 0 0x48040000 0x00000100
			2 0 0x48080000 0x00000100
			3 0 0x480A0000 0x00000100
			4 0 0x480C0000 0x00000100
			5 0 0x480E0000 0x00000100
		>;

		can@0,0 {
			compatible = "nxp,sja1000";
			reg = <0 0 0x100>;
			interrupt-parent = <&gpio>;
			interrupts = <TEGRA_GPIO(B, 5) IRQ_TYPE_EDGE_RISING>;
			nxp,external-clock-frequency = <24000000>;
			nxp,tx-output-config = <0x16>;
			nxp,clock-out-frequency = <24000000>;
			reg-io-width = <2>;
		};


		can@1,0 {
			compatible = "nxp,sja1000";
			reg = <1 0 0x100>;
			interrupt-parent = <&gpio>;
			interrupts = <TEGRA_GPIO(A, 6) IRQ_TYPE_EDGE_RISING>;
			nxp,external-clock-frequency = <24000000>;
			nxp,tx-output-config = <0x16>;
			reg-io-width = <2>;
		};


		can@2,0 {
			compatible = "nxp,sja1000";
			reg = <2 0 0x100>;
			interrupt-parent = <&gpio>;
			interrupts = <TEGRA_GPIO(N, 0) IRQ_TYPE_EDGE_RISING>;
			nxp,external-clock-frequency = <24000000>;
			nxp,tx-output-config = <0x16>;
			reg-io-width = <2>;
		};


		can@3,0 {
			compatible = "nxp,sja1000";
			reg = <3 0 0x100>;
			interrupt-parent = <&gpio>;
			interrupts = <TEGRA_GPIO(N, 1) IRQ_TYPE_EDGE_RISING>;
			nxp,external-clock-frequency = <24000000>;
			nxp,tx-output-config = <0x16>;
			reg-io-width = <2>;
		};


		can@4,0 {
			compatible = "nxp,sja1000";
			reg = <4 0 0x100>;
			interrupt-parent = <&gpio>;
			interrupts = <TEGRA_GPIO(N, 2) IRQ_TYPE_EDGE_RISING>;
			nxp,external-clock-frequency = <24000000>;
			nxp,tx-output-config = <0x16>;
			reg-io-width = <2>;
		};


		can@5,0 {
			compatible = "nxp,sja1000";
			reg = <5 0 0x100>;
			interrupt-parent = <&gpio>;
			interrupts = <TEGRA_GPIO(N, 3) IRQ_TYPE_EDGE_RISING>;
			nxp,external-clock-frequency = <24000000>;
			nxp,tx-output-config = <0x16>;
			reg-io-width = <2>;
		};
	};

	serial@70006000 {
		status = "okay";
	};

	serial@70006040 {
		compatible = "nvidia,tegra30-hsuart";
		status = "okay";
	};

	serial@70006300 {
		compatible = "nvidia,tegra30-hsuart";
		status = "okay";
	};

		/*
	 * GEN1_I2C: I2C_SDA/SCL on SODIMM pin 194/196 (e.g. RTC on carrier
	 * board)
	 */
	i2c@7000c000 {
		status = "okay";
		clock-frequency = <100000>;

		/* Freescale MMA8452Q */
	    mma8452q@1c {
	    	compatible = "fsl,mma8452";
	    	reg = <0x1c>;
	        interrupt-parent = <&gpio>;
	        interrupts = <TEGRA_GPIO(K, 4) GPIO_ACTIVE_LOW>;
	    };
	};

	/* SPI1: Colibri SSP */
	spi@7000d400 {
		status = "okay";
		spi-max-frequency = <25000000>;

		mx4_io_spi: spi@0 {
	       	compatible = "mx4_io_spi";
	       	reg = <0>;
	       	spi-max-frequency = <8000000>;
			interrupt-parent = <&gpio>;
	       	interrupts = <TEGRA_GPIO(O, 5) GPIO_ACTIVE_HIGH>;
	       	gpios = <&gpio TEGRA_GPIO(V, 1) GPIO_ACTIVE_HIGH>;
	       	spi-cpha;
   		};

   	    mx4_pic: spi@1 {
        	compatible = "hostmobility,pic";
        	reg = <1>;
        	spi-max-frequency = <25000000>;
    	};
	};

	sdhci@78000200 {
		status = "okay";
		bus-width = <4>;
		cd-gpios = <&gpio TEGRA_GPIO(C, 7) GPIO_ACTIVE_LOW>;
		no-1-8-v;
	};

	/* EHCI instance 0: USB1_DP/N -> USBC_P/N */
	usb@7d000000 {
		status = "okay";
	};

	usb-phy@7d000000 {
		status = "okay";
		dr_mode = "otg";
		vbus-supply = <&usbc_vbus_reg>;
	};

	/* EHCI instance 2: USB3_DP/N -> USBH_P/N */
	usb@7d008000 {
		status = "okay";
	};

	usb-phy@7d008000 {
		status = "okay";
		vbus-supply = <&usbh_vbus_reg>;
	};

	wlan_en_reg: fixedregulator@2 {
		compatible = "regulator-fixed";
		regulator-name = "wlan-en-regulator";
		regulator-min-microvolt = <1800000>;
		regulator-max-microvolt = <1800000>;
		startup-delay-us = <70000>;

		/* WLAN_EN GPIO for this board - Tegra BankO, pin0 */
		gpio = <&gpio TEGRA_GPIO(O, 0) GPIO_ACTIVE_HIGH>;
		enable-active-high;
	};

	regulators {
		sys_5v0_reg: regulator@1 {
			compatible = "regulator-fixed";
			reg = <1>;
			regulator-name = "5v0";
			regulator-min-microvolt = <5000000>;
			regulator-max-microvolt = <5000000>;
			regulator-always-on;
		};

		usbc_vbus_reg: regulator@2 {
			compatible = "regulator-fixed";
			reg = <2>;
			regulator-name = "usbc_vbus";
			regulator-min-microvolt = <5000000>;
			regulator-max-microvolt = <5000000>;
			vin-supply = <&sys_5v0_reg>;
		};

		/* USBH_PEN */
		usbh_vbus_reg: regulator@3 {
			compatible = "regulator-fixed";
			reg = <3>;
			regulator-name = "usbh_vbus";
			regulator-min-microvolt = <5000000>;
			regulator-max-microvolt = <5000000>;
			gpio = <&gpio TEGRA_GPIO(W, 2) GPIO_ACTIVE_LOW>;
			vin-supply = <&sys_5v0_reg>;
		};
	};

	mmc1 {
		status = "okay";
		vmmc-supply = <&wlan_en_reg>;
		bus-width = <4>;
		pinctrl-names = "default", "sleep";
		pinctrl-0 = <&mmc1_pins_default &wlan_pins_default>;
		ti,non-removable;
		ti,needs-special-hs-handling;
		cap-power-off-card;
		keep-power-in-suspend;

		#address-cells = <1>;
		#size-cells = <0>;
		wlcore: wlcore@0 {
			compatible = "ti,wl1835";
			reg = <2>;
			interrupt-parent = <&gpio>;
			interrupts = <TEGRA_GPIO(O, 0) IRQ_TYPE_EDGE_RISING>;
		};
	};
};
